[{"href": "./index.html", "title": "Home", "contents": "@wokalski", "rendered": "<a href=\"http://twitter.com/wokalski\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">@wokalski</a>", "breadcrumb": "Home"},
{"href": "./index.html#Author", "title": "Author", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "let login _: Vow.Result.t authenticationState error Vow.handled =>\n  /* Returns a handled Vow.Result.t */\n  Login.logIn () |>\n  /* Validates the returned value. Since the vow is handled we don't need to catch*/\n  Vow.Result.flatMap (\n    fun x =>\n      if x##isCancelled {\n        Vow.Result.fail LoginRequestCancelled\n      } else {\n        Vow.Result.return ()\n      }\n  ) |>\n  /* Another handled Vow.Result.t */\n  Vow.Result.flatMap Login.getCurrentAccessToken () |>\n  Vow.Result.map (\n    fun x => {\n      let token = x##accessToken;\n      /* This returns an unhandled Vow.Result.t.\n       * Note that the 'error types have to match\n       * Because after one error the subsequent operations\n       * Are not performed.\n       */\n      Queries.login ::token\n    }\n  ) |>\n  /* Ooops, the `Queries.login` might reject.\n   * We are forced to handle it in the compile time.\n   */\n  Vow.Result.onError (fun _ => Vow.Result.fail GraphQlSignInError) |>\n  Vow.Result.flatMap (\n    fun x =>\n      switch x {\n      | Authenticated {token, userId} =>\n        /* The promise we wrap is never rejected */\n        Vow.unsafeWrap\n          KeyChain.(\n            Js.Promise.all2 (\n              setGenericPassword username::\"userId\" password::userId service::\"userId\",\n              setGenericPassword username::\"token\" password::token service::\"token\"\n            )\n          ) |>\n        Vow.map (fun _ => Vow.Result.return x)\n      | _ => Vow.Result.return x\n      }\n  );", "rendered": "<pre><code>let login _: Vow.Result.t authenticationState error Vow.handled =>\n  /* Returns a handled Vow.Result.t */\n  Login.logIn () |>\n  /* Validates the returned value. Since the vow is handled we don't need to catch*/\n  Vow.Result.flatMap (\n    fun x =>\n      if x##isCancelled {\n        Vow.Result.fail LoginRequestCancelled\n      } else {\n        Vow.Result.return ()\n      }\n  ) |>\n  /* Another handled Vow.Result.t */\n  Vow.Result.flatMap Login.getCurrentAccessToken () |>\n  Vow.Result.map (\n    fun x => {\n      let token = x##accessToken;\n      /* This returns an unhandled Vow.Result.t.\n       * Note that the 'error types have to match\n       * Because after one error the subsequent operations\n       * Are not performed.\n       */\n      Queries.login ::token\n    }\n  ) |>\n  /* Ooops, the `Queries.login` might reject.\n   * We are forced to handle it in the compile time.\n   */\n  Vow.Result.onError (fun _ => Vow.Result.fail GraphQlSignInError) |>\n  Vow.Result.flatMap (\n    fun x =>\n      switch x {\n      | Authenticated {token, userId} =>\n        /* The promise we wrap is never rejected */\n        Vow.unsafeWrap\n          KeyChain.(\n            Js.Promise.all2 (\n              setGenericPassword username::\"userId\" password::userId service::\"userId\",\n              setGenericPassword username::\"token\" password::token service::\"token\"\n            )\n          ) |>\n        Vow.map (fun _ => Vow.Result.return x)\n      | _ => Vow.Result.return x\n      }\n  );</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Let&#39;s see a real world example of vows with some comments:", "rendered": "Let&#39;s see a real world example of vows with some comments:", "breadcrumb": "Home"},
{"href": "./index.html#Example", "title": "Example", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "If you unsafeWrap a promise which does throw your code will be unsound.", "rendered": "If you <code>unsafeWrap</code> a promise which does throw your code will be unsound.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "In order to use vows you have to bind to your existing APIs using Vow.wrap/Vow.unsafeWrap.", "rendered": "In order to use vows you have to bind to your existing APIs using <code>Vow.wrap</code>/<code>Vow.unsafeWrap</code>.", "breadcrumb": "Home"},
{"href": "./index.html#Binding", "title": "Binding", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Therefore vow is not sound.", "rendered": "Therefore <code>vow</code> is not sound.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "\nvow 'a 'status", "rendered": "<pre><code>\nvow 'a 'status</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "However, under the scenes it&#39;ll really be", "rendered": "However, under the scenes it&#39;ll really be", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "/* in Reason syntax */\n\nvow (Js.Promise.t 'a) 'status", "rendered": "<pre><code>/* in Reason syntax */\n\nvow (Js.Promise.t 'a) 'status</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "However if you put a Js.Promise.t inside a vow (which are boxed Js.Promise.t under the scenes) you&#39;re gonna get a vow of the following type:", "rendered": "However if you put a <code>Js.Promise.t</code> inside a <code>vow</code> (which are boxed <code>Js.Promise.t</code> under the scenes) you&#39;re gonna get a <code>vow</code> of the following type:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "This is resolved with vows. If you nest vows they behave as expected.", "rendered": "This is resolved with <code>vow</code>s. If you nest <code>vow</code>s they behave as expected.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Js.Promise.t is unsafe when you nest promises. i.e. Js.Promise.t (Js.Promise.t &#39;a) is unsound. In the runtime it&#39;s Js.Promise.t.", "rendered": "<code>Js.Promise.t</code> is unsafe when you nest promises. i.e. <code>Js.Promise.t (Js.Promise.t &#39;a)</code> is unsound. In the runtime it&#39;s <code>Js.Promise.t</code>.", "breadcrumb": "Home"},
{"href": "./index.html#Nesting-vows", "title": "Nesting vows", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "You can unwrap a handled promise using Vow.unwrap.", "rendered": "You can unwrap a handled promise using <code>Vow.unwrap</code>.", "breadcrumb": "Home"},
{"href": "./index.html#Unwrapping", "title": "Unwrapping", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "It only accepts promises which are properly handled.", "rendered": "It only accepts promises which are properly handled.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "After series of operations you usually want to &quot;consume&quot; a promise. Vow.sideEffect should be used for that.", "rendered": "After series of operations you usually want to &quot;consume&quot; a promise. <code>Vow.sideEffect</code> should be used for that.", "breadcrumb": "Home"},
{"href": "./index.html#Side-effects", "title": "Side effects", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "{\n  ...\n  \"bs-dependencies\": [\"@wokalski/vow\"]\n}", "rendered": "<pre><code>{\n  ...\n  \"bs-dependencies\": [\"@wokalski/vow\"]\n}</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Then add vow to bs-dependencies in your bsconfig.json:", "rendered": "Then add <code>vow</code> to <code>bs-dependencies</code> in your <code>bsconfig.json</code>:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "npm install --save @wokalski/vow", "rendered": "<pre><code>npm install --save @wokalski/vow</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Installation", "title": "Installation", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "A Vow can be either handled and unhandled. All promises of type vow &#39;a handled make sure that you handled Promise rejections. Thanks to that you will avoid the Uncaught promise error.", "rendered": "A <code>Vow</code> can be either <code>handled</code> and <code>unhandled</code>. All promises of type <code>vow &#39;a handled</code> make sure that you handled Promise rejections. Thanks to that you will avoid the Uncaught promise error.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Vow is a tiny library which allows you to handle promises more safely in your Bucklescript application.", "rendered": "<code>Vow</code> is a tiny library which allows you to handle promises more safely in your Bucklescript application.", "breadcrumb": "Home"},
{"href": "./index.html#Vow", "title": "Vow", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./api/vow.html#value-all", "title": "all", "contents": "all list t handled t list handled ", "rendered": "<h4 class='item'>let all = list(<a href=\"./api/vow.html#type-t\">t</a>('value, <a href=\"./api/vow.html#type-handled\">handled</a>)) => <a href=\"./api/vow.html#type-t\">t</a>(\n    list('value),\n    <a href=\"./api/vow.html#type-handled\">handled</a>\n)</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#value-all4", "title": "all4", "contents": "all4 t handled t handled t handled t handled t handled ", "rendered": "<h4 class='item'>let all4 = (\n    <a href=\"./api/vow.html#type-t\">t</a>('v1, <a href=\"./api/vow.html#type-handled\">handled</a>),\n    <a href=\"./api/vow.html#type-t\">t</a>('v2, <a href=\"./api/vow.html#type-handled\">handled</a>),\n    <a href=\"./api/vow.html#type-t\">t</a>('v3, <a href=\"./api/vow.html#type-handled\">handled</a>),\n    <a href=\"./api/vow.html#type-t\">t</a>('v4, <a href=\"./api/vow.html#type-handled\">handled</a>)\n) => <a href=\"./api/vow.html#type-t\">t</a>(('v1, 'v2, 'v3, 'v4), <a href=\"./api/vow.html#type-handled\">handled</a>)</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#value-all3", "title": "all3", "contents": "all3 t handled t handled t handled t handled ", "rendered": "<h4 class='item'>let all3 = (\n    <a href=\"./api/vow.html#type-t\">t</a>('v1, <a href=\"./api/vow.html#type-handled\">handled</a>),\n    <a href=\"./api/vow.html#type-t\">t</a>('v2, <a href=\"./api/vow.html#type-handled\">handled</a>),\n    <a href=\"./api/vow.html#type-t\">t</a>('v3, <a href=\"./api/vow.html#type-handled\">handled</a>)\n) => <a href=\"./api/vow.html#type-t\">t</a>(('v1, 'v2, 'v3), <a href=\"./api/vow.html#type-handled\">handled</a>)</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#value-all2", "title": "all2", "contents": "all2 t handled t handled t handled ", "rendered": "<h4 class='item'>let all2 = (<a href=\"./api/vow.html#type-t\">t</a>('v1, <a href=\"./api/vow.html#type-handled\">handled</a>), <a href=\"./api/vow.html#type-t\">t</a>('v2, <a href=\"./api/vow.html#type-handled\">handled</a>)) => <a href=\"./api/vow.html#type-t\">t</a>(\n    ('v1, 'v2),\n    <a href=\"./api/vow.html#type-handled\">handled</a>\n)</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#value-unwrap", "title": "unwrap", "contents": "unwrap t handled Js Promise t container ", "rendered": "<h4 class='item'>let unwrap = <a href=\"./api/vow.html#type-t\">t</a>('a, <a href=\"./api/vow.html#type-handled\">handled</a>) => Js.Promise.t(<a href=\"./api/vow.html#type-container\">container</a>('a))</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#type-container", "title": "container", "contents": "container value", "rendered": "<h4 class='item'>type container('a) = {value: 'a}</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#value-unsafeWrap", "title": "unsafeWrap", "contents": "unsafeWrap Js Promise t t handled ", "rendered": "<h4 class='item'>let unsafeWrap = Js.Promise.t('a) => <a href=\"./api/vow.html#type-t\">t</a>('a, <a href=\"./api/vow.html#type-handled\">handled</a>)</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#value-wrap", "title": "wrap", "contents": "wrap Js Promise t t unhandled ", "rendered": "<h4 class='item'>let wrap = Js.Promise.t('a) => <a href=\"./api/vow.html#type-t\">t</a>('a, <a href=\"./api/vow.html#type-unhandled\">unhandled</a>)</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#value-onError", "title": "onError", "contents": "onError unit t  t unhandled t  ", "rendered": "<h4 class='item'>let onError = (\n    unit => <a href=\"./api/vow.html#type-t\">t</a>('a, 'status),\n    <a href=\"./api/vow.html#type-t\">t</a>('a, <a href=\"./api/vow.html#type-unhandled\">unhandled</a>)\n) => <a href=\"./api/vow.html#type-t\">t</a>('a, 'status)</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#value-sideEffect", "title": "sideEffect", "contents": "sideEffect unit  t handled unit  ", "rendered": "<h4 class='item'>let sideEffect = ('a => unit, <a href=\"./api/vow.html#type-t\">t</a>('a, <a href=\"./api/vow.html#type-handled\">handled</a>)) => unit</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#value-mapUnhandled", "title": "mapUnhandled", "contents": "mapUnhandled  t unhandled t unhandled  ", "rendered": "<h4 class='item'>let mapUnhandled = ('a => 'b, <a href=\"./api/vow.html#type-t\">t</a>('a, <a href=\"./api/vow.html#type-unhandled\">unhandled</a>)) => <a href=\"./api/vow.html#type-t\">t</a>(\n    'b,\n    <a href=\"./api/vow.html#type-unhandled\">unhandled</a>\n)</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#value-map", "title": "map", "contents": "map  t handled t  ", "rendered": "<h4 class='item'>let map = ('a => 'b, <a href=\"./api/vow.html#type-t\">t</a>('a, <a href=\"./api/vow.html#type-handled\">handled</a>)) => <a href=\"./api/vow.html#type-t\">t</a>('b, 'status)</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#value-flatMapUnhandled", "title": "flatMapUnhandled", "contents": "flatMapUnhandled t  t unhandled t unhandled  ", "rendered": "<h4 class='item'>let flatMapUnhandled = (\n    'a => <a href=\"./api/vow.html#type-t\">t</a>('b, 'status),\n    <a href=\"./api/vow.html#type-t\">t</a>('a, <a href=\"./api/vow.html#type-unhandled\">unhandled</a>)\n) => <a href=\"./api/vow.html#type-t\">t</a>('b, <a href=\"./api/vow.html#type-unhandled\">unhandled</a>)</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#value-flatMap", "title": "flatMap", "contents": "flatMap t  t handled t  ", "rendered": "<h4 class='item'>let flatMap = ('a => <a href=\"./api/vow.html#type-t\">t</a>('b, 'status), <a href=\"./api/vow.html#type-t\">t</a>('a, <a href=\"./api/vow.html#type-handled\">handled</a>)) => <a href=\"./api/vow.html#type-t\">t</a>(\n    'b,\n    'status\n)</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#value-return", "title": "return", "contents": "return t handled ", "rendered": "<h4 class='item'>let return = 'a => <a href=\"./api/vow.html#type-t\">t</a>('a, <a href=\"./api/vow.html#type-handled\">handled</a>)</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a, 'status)</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#type-unhandled", "title": "unhandled", "contents": "unhandled ", "rendered": "<h4 class='item'>type unhandled</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html#type-handled", "title": "handled", "contents": "handled ", "rendered": "<h4 class='item'>type handled</h4>", "breadcrumb": "vow"},
{"href": "./api/vow.html", "title": "vow", "contents": "@rest", "rendered": "@rest", "breadcrumb": "vow"},
{"href": "./api/vow.html", "title": "vow", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "vow"},
{"href": "./api/vow.html#vow", "title": "vow", "contents": "", "rendered": "", "breadcrumb": "vow"},
{"href": "./api/soundness_tests.html", "title": "soundness_tests", "contents": "@rest", "rendered": "@rest", "breadcrumb": "soundness_tests"},
{"href": "./api/soundness_tests.html", "title": "soundness_tests", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "soundness_tests"},
{"href": "./api/soundness_tests.html#soundness_tests", "title": "soundness_tests", "contents": "", "rendered": "", "breadcrumb": "soundness_tests"}]